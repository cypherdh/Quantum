--[[ 
Quantum Compatibility Check 

This script verifies whether Quantum will function correctly in your debugging/sandboxing tool. 
To view the results, open the Developer Console, where the output will be displayed.
]]

local Print = secureprint or print
local Warn = securewarn or warn
local issupported = true

Print("üîç Quantum compatibility check starting...")

-- loadstring
if loadstring(game:HttpGet("https://pastebin.com/raw/8dStgqFA"))() ~= os.time() then
    Warn("‚ùå loadstring not supported!")
    issupported = false
else
    Print("‚úÖ loadstring supported!")
end

-- getgenv 
getgenv().d = math.random
if getgenv().d ~= math.random then
    Warn("‚ùå getgenv not supported!")
    issupported = false
else
    Print("‚úÖ getgenv supported!")
end
getgenv().d = nil

-- require
local p = game:GetService("Players").LocalPlayer.PlayerScripts:FindFirstChild("PlayerModule")
local s, r = p and p:IsA("ModuleScript") and pcall(require, p)
Print(s and "‚úÖ require supported!" or "‚ùå require not supported!")
if not s then issupported = false end

-- getupvalue (CREDIT: UNC TEST)
local upvalue = function() end
local function test()
    print(upvalue)
end
if debug.getupvalue(test, 1) ~= upvalue then
    Warn("‚ùå debug.getupvalue not supported!")
    issupported = false
else
    Print("‚úÖ debug.getupvalue supported!")
end

-- writefile (CREDIT: UNC TEST)
local success = pcall(function()
    writefile("test_writefile.txt", "success")
end)

if not success then
    Warn("‚ùå writefile not supported!")
    issupported = false
else
    Print("‚úÖ writefile supported!")
end

-- readfile (CREDIT: UNC TEST)
local success2, content = pcall(readfile, "test_writefile.txt")

if not success2 or content ~= "success" then
    Warn("‚ùå readfile not supported!")
    issupported = false
else
    Print("‚úÖ readfile supported!")
end

-- isfile
local success2, content = pcall(isfile, "test_writefile.txt")
if not success2 or content == false then
    Warn("‚ùå isfile not supported!")
    issupported = false
else
    Print("‚úÖ isfile supported!")
end

if delfile then delfile("test_writefile.txt") end

-- cache.invalidate / cache.iscached
local dummyinstance = Instance.new("Part")

local cachesupported = true
local ok1, result1 = pcall(function()
    return cache.iscached(dummyinstance)
end)
if not ok1 then
    Warn("‚ùå cache.iscached not supported!")
    cachesupported = false
    issupported = false
else
    Print("‚úÖ cache.iscached supported!")
end

local ok2 = pcall(function()
    cache.invalidate(dummyinstance)
end)
if not ok2 then
    Warn("‚ùå cache.invalidate not supported!")
    cachesupported = false
    issupported = false
elseif cachesupported then
    Print("‚úÖ cache.invalidate supported!")
end

dummyinstance:Destroy();dummyinstance = nil

-- setclipboard
if not setclipboard then Warn("‚ùå setclipboard not supported!") issupported = false else Print("‚úÖ setclipboard supported!") end

-- hookmetamethod (CREDIT: UNC TEST)
local success, err = pcall(function()
	local object = setmetatable({}, {
		__index = newcclosure(function() return false end),
		__metatable = "Locked!"
	})

	local original = hookmetamethod(object, "__index", function()
		return true
	end)

	assert(object.test == true, "hookmetamethod didn't override __index properly")
	assert(original() == false, "Returned original function doesn't behave correctly")
end)

if success then
	Print("‚úÖ hookmetamethod supported!")
else
	Warn("‚ùå hookmetamethod not supported!")
	issupported = false
end


-- Final Result
if issupported then
    Print("-----------------------")
    Print("‚úÖ Quantum is supported on:", identifyexecutor())
    Print("-----------------------")
else
    Warn("-----------------------")
    Warn("‚ùå Quantum is NOT fully supported on:", identifyexecutor())
    Warn("-----------------------")
end
