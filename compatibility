--[[ 
Quantum Compatibility Check 

This script verifies whether Quantum will function correctly in your debugging/sandboxing tool. 
To view the results, open the Developer Console, where the output will be displayed.
]]

local Print = secureprint or print
local Warn = securewarn or warn
local issupported = true

Print("üîç Quantum compatibility check starting...")

-- loadstring
if loadstring(game:HttpGet("https://pastebin.com/raw/8dStgqFA"))() ~= os.time() then
    Warn("‚ùå loadstring() is not supported!")
    issupported = false
else
    Print("‚úÖ loadstring() is supported!")
end

-- getgenv
getgenv().__TEST_GLOBAL = true
if __TEST_GLOBAL ~= true then
    Warn("‚ùå getgenv() is not supported!")
    issupported = false
else
    Print("‚úÖ getgenv() is supported!")
end
getgenv().__TEST_GLOBAL = nil

-- require
local p = game:GetService("Players").LocalPlayer.PlayerScripts:FindFirstChild("PlayerModule")
local s, r = p and p:IsA("ModuleScript") and pcall(require, p)
Print(s and "‚úÖ require is supported!" or "‚ùå require is not supported!")
if not s then issupported = false end

-- getupvalue
local upvalue = function() end
local function test()
    print(upvalue)
end
if debug.getupvalue(test, 1) ~= upvalue then
    Warn("‚ùå debug.getupvalue() is not supported!")
    issupported = false
else
    Print("‚úÖ debug.getupvalue() is supported!")
end

-- writefile
local success = pcall(function()
    writefile("test_writefile.txt", "success")
end)

if not success then
    Warn("‚ùå writefile() is not supported!")
    issupported = false
else
    Print("‚úÖ writefile() is supported!")
end

-- readfile
local success2, content = pcall(readfile, "test_writefile.txt")

if not success2 or content ~= "success" then
    Warn("‚ùå readfile() is not supported!")
    issupported = false
else
    Print("‚úÖ readfile() is supported!")
end

if delfile then delfile("test_writefile.txt") end

-- cache.invalidate / cache.iscached
local dummyinstance = Instance.new("Part")

local cachesupported = true
local ok1, result1 = pcall(function()
    return cache.iscached(dummyinstance)
end)
if not ok1 then
    Warn("‚ùå cache.iscached() is not supported!")
    cachesupported = false
    issupported = false
else
    Print("‚úÖ cache.iscached() is supported!")
end

local ok2 = pcall(function()
    cache.invalidate(dummyinstance)
end)
if not ok2 then
    Warn("‚ùå cache.invalidate() is not supported!")
    cachesupported = false
    issupported = false
elseif cachesupported then
    Print("‚úÖ cache.invalidate() is supported!")
end

dummyinstance:Destroy();dummyinstance = nil

-- Final Result
if issupported then
    Print("-----------------------")
    Print("‚úÖ Quantum is supported on:", identifyexecutor())
    Print("-----------------------")
else
    Warn("-----------------------")
    Warn("‚ùå Quantum is NOT fully supported on:", identifyexecutor())
    Warn("-----------------------")
end
